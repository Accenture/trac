/*
 * Copyright 2020 Accenture Global Solutions Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = 'proto3';
package trac.metadata;

option java_package = "com.accenture.trac.common.metadata";
option java_multiple_files = true;

/**
 * Type system for TRAC metadata, APIs and data
 * The types described here can are used throughout the TRAC platform.
 * The protobuf (and equivalent JSON) encoding can be used in TRAC metadata and API calls.
 *
 * For primary data stored and used in TRAC the same set of types is available.
 * Encoding of primary data is handled separately, for example, a tabular data set can use
 * the primitive types encoded as columns in AVRO or ORC format.
 *
 * Not all types are available everywhere! The allowable set of types for a particular
 * function is guarded by validation. This provides an upgrade path for any function to
 * support more complex types in future.
 */

/**
 * Basic types provide the set of core types available in the TRAC type system.
 */
enum BasicType {

    BASIC_TYPE_NOT_SET = 0;

    /// A true/false value
    BOOLEAN = 1;

    /// 64 bit signed integer
    INTEGER = 2;

    /// 64 bit signed floating point number (referred to as 'double' in many languages)
    FLOAT = 3;

    /**
     * A fixed-point decimal value with known precision and scale.
     *
     * The available precision and scale may vary between languages / platforms.
     *
     * For metadata attributes, TRAC provides the following guarantees on precision:
     *      precision >= 31
     *      scale >= 10
     * precision - scale >= 21
     */
    DECIMAL = 4;

    /**
     * UTF encoded string value of arbitrary length.
     *
     * The encoding used (e.g. UTF-8, UTF-16, UCS-16) varies between languages / platforms,
     * generally TRAC will present strings using the standard encoding for a given language or
     * protocol.
     */
    STRING = 5;

    /**
     * A date value.
     *
     * Dates do not take any account of time zones or offsets from UTC.
     */
    DATE = 6;

    /**
     * A date-time value.
     *
     * Date-time values may be expressed with an offset from UTC, as per ISO 8601.
     * The available sub-second precision may vary depending on language / platform.
     *
     * For metadata attributes, TRAC represents all date-times as in UTC with
     * microsecond precision. Incoming values will be converted to UTC if they are
     * supplied with an offset.
     */
    DATETIME = 7;

    /**
     * An array of values, which may be primitive or composite values.
     *
     * All items in an array must have the same type (i.e. the same type descriptor).
     */
    ARRAY = 8;
}


/**
 * A type descriptor describes a data type used in the TRAC platform.
 *
 * For complex types, the descriptor holds a full type description. E.g. for
 * array types, the type being held in the array is described. At a later point,
 * precision fields may be introduced for decimals, or field types for structs.
 */
message TypeDescriptor {

    /// The basic type being described
    BasicType basicType = 1;

    /// For array types only, describe the type contained in the array
    TypeDescriptor arrayType = 2;
}


/// Represent a decimal value (this could be replaced by a string representation)
message DecimalValue {

    oneof representation {
        string str = 1;
    }
}

/// Represent a date value (this could be replaced by a string representation)
message DateValue {

    oneof representation {
        string isoDate = 1;
    }
}

/// Represent a date-time value (this could be replaced by a string representation)
message DateTimeValue {

    oneof representation {
        string isoDateTime = 1;
    }
}

/// Represent an object ID (this could be replaced by a string representation)
message UUID {

    // TODO - UUID could be removed as a structured type
    // Instead use strings with appropriate validation, for ease of interoperability

    sint64 hi = 1;
    sint64 lo = 2;
}


/**
 * A value can represent any value expressed in the TRAC type system.
 *
 * A value may be a primitive value, or a composite value such as an array.
 * Every value must include a type descriptor and the value must match the type descriptor.
 * Composite types need only include a type descriptor in the root value, e.g. it is not
 * necessary to set a type descriptor for every item in an array, although it is allowed to
 * do so.
 */
message Value {

    /// Type descriptor for the current value
    TypeDescriptor type = 1;

    oneof value {

        bool booleanValue = 2;
        sint64 integerValue = 3 [jstype = JS_NUMBER];
        double floatValue = 4;
        DecimalValue decimalValue = 5;
        string stringValue = 6;
        DateValue dateValue = 7;
        DateTimeValue datetimeValue = 8;
        ArrayValue arrayValue = 9;
    }
}


/**
 * An array value holds an array of other TRAC values.
 *
 * All items in an array must be of the same type (i.e. have the same type descriptor).
 */
message ArrayValue {

    repeated Value item = 1;
}
