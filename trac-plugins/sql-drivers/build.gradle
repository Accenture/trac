/*
 * Copyright 2020 Accenture Global Solutions Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * The sql-drivers project builds drivers as configured in gradle/plugins.gradle
 *
 * For development and testing, SQL drivers can be used immediately by linking
 * against the sql-drivers project as a runtime dependency. The build system will
 * try to turn this on automatically if it detects it is running from an IDE.
 *
 * For public releases there should be no dependency on any SQL drivers. Instead,
 * required drivers can be loaded at start time using the plugins mechanism. To
 * test this mechanism, plugins can be packed in the standard layout using the
 * packPlugins task.
 */

plugins {
    id "java-library"
}

apply from: "${rootProject.projectDir.path}/gradle/base-java.gradle"
apply from: "${rootProject.projectDir.path}/gradle/plugins.gradle"


// Set up source sets and dependencies for all supported SQL dialects

sourceSets {

    h2 {}
    mariadb {}
}

dependencies {

    h2RuntimeOnly group: 'com.h2database', name: 'h2', version: "$h2_version"
    mariadbRuntimeOnly group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: "$mariadb_version"
}


// Skeleton tasks for packing plugins

configurations {
    packPlugins
}

task packPlugins {

}

def packPlugin(SourceSet dialect) {

    def pluginDir = "${rootProject.buildDir.path}/plugins/sql.${dialect.name}"
    mkdir(pluginDir)

    copy {
        from dialect.runtimeClasspath
        into pluginDir
    }
}


// Lock for the enabled driver plugins and switch them on

sourceSets.each { dialect ->

    if (dialect.name != "main" && dialect.name != "test") {

        // Only build drivers that are enabled in gradle/plugins.gradle

        def buildDriver = false

        if (project.hasProperty("BUILD_ALL_PLUGINS") && project.property("BUILD_ALL_PLUGINS"))
            buildDriver = true

        if (project.hasProperty("BUILD_sql_${dialect.name}") && project.property("BUILD_sql_${dialect.name}"))
            buildDriver = true

        if (buildDriver) {

            println("Enabling SQL driver: ${dialect.name}")

            // API dependency allows drivers to be used by linking the sql-drivers project
            dependencies {
                api dialect.runtimeClasspath
            }

            // packPlugin task is used to build plugins for deployment or distribution
            tasks.create("packPlugin_sql.${dialect.name}", { -> packPlugin(dialect) })
            tasks.packPlugins.dependsOn("packPlugin_sql.${dialect.name}")
        }

    }
}
